#+SETUPFILE: setup.org
#+TITLE: SAT ANALYSIS TASK 2


* NEXT Question 1

- Using mathematical notation and computer science conventions
  describe the time complexity of the algorithm MinOP for the worst
  case.
- What are the naive elements of the algorithm MinOP that allow a
  specific design pattern to be applied to improve its time
  complexity?
- Describe in detail the aspects of the methodology you would use for
  the design of the improved algortithm.

* TODO Question 2

- Write in pseudocode your own improved time complexity version of
  this algorithm. This algorithm should use meaningful variable names,
  it should indicate what inputs and outputs are expected, as well as
  including comments for complicated commands. Reference to external
  procedures or functions that are called should include a measure of
  their time complexity.


* TODO Question 3

- Describe the relationship in a methodical and systematic way using
  mathematrcal notation and computer science conventions for the time
  complexity of the new version of algorithm with regards to its input
  size and its asymptotic running time in the best and worst cases.
- Desribe the situations where the best case time complexity will
  occur and contrast it with the type of input that results in the
  worst case time complexity for the new algorithm that you created.

* TODO Question 4
- Compare your new algorithm with the orginal MinOP algorithm. Discuss
  and highlight the improvements that your new version has made and
  specify any trade-offs that you made to achieve the improvement in
  time complexity.
- Create a graph of the best and worst case time complexity against
  the input size for the orginal algorithm and your improved
  version. Clearly label the axes and the lines representing each
  algorithm on your graph by either labelling the line or using a
  legend.
- Justify the correctness of your new improved algorithm, using a
  valid argument. Diagrams may also be used to illustrate your
  argument.


* Solution 1

** Part (a)

** Part (b)

The algorithm MinOP contains sub-problems that are identical to the
original problem and --- that allow recursion to be used to solve this
problem. This however is a naive approach to the solution to this
problem. This is shown in the following call tree. This allows a
design pattern such as dynamic programming to be used because of these
sub-problems.

** Part (c)

There are two ways I would improve this algorithm:
- Dyanamic Programming
- Backtracking

* Solution 2

#+BEGIN_SRC ruby
=begin

INPUTS: n, Operations, Operator, Operand
OUTPUTS: minCount
ASSUMPTIONS: n > 1

=end

Function MinOP()
    def m = [1] 
    For i in 2..n do
        set MinCount = 999999
        For j in 1..len(operations) do
            If operator[j] = "-" then
                If m[i-operand[j]] < minCount then
                    minCount = m[i-Operand[j]]
            Elseif Operator[j] = "/" then
                If mod(i,Operand[j]) = 0 then
                    If m[n/operand[j]] < minCount then
                        minCount = m[n/operand[j]]
            def m[n] = minCount
    print "The Minimum amount of operations is " + #{m[n]}
end function
#+END_SRC

* Solution 3

** Part (a)

\begin{align*}
O(1) + O(n-1) \bigg( O(m) \big( 6O(1) \big) \bigg)
\end{align*}

** Part (b)



* Solution 4


** Part (a)

My algorithm of MinOP has a more concealed upper and lower bound. 
