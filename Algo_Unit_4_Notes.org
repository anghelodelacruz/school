#+SETUPFILE: setup.org
#+TITLE: Algorithmics Unit 4 Notes
#+OPTIONS: num:nil

* Mathematical Concepts 

** Notation

** Proof by Induction

** Counting Commands

* Time Complexity of Algorithms

** Counting Actions

** Time Complexity

** Loop Invariants

* Divide & Conquer

** Efficient Searching

** Sorting Information

** Quicksort

* Master Theorem

** Time Complexity

** Time Complexity for D&C

** Master Theorem

* Dynamic Programming

** Coin Change Problem

** Coin Change using DP

** Backtracking Design Pattern

* Advanced Algorithms

** Case Study 1: Closest Pair of Points 1D

** Case Study 2: Minimum Cost Path
** Case Study 3: N-Queen Problem

* NEXT Algorithm Design

** Dynamic Programming 

Algorithm patterns to consider when improving a naive algorithm. 

- Naive Algorithms :: brute force/exhuastive, test all possible
     solutions to find the best one
- Greedy :: find a promising starting point and expand to include most
            favourable selections until a solution is found.
- Divide & Conquer :: break the problem into smaler independent
     sub-problems, solve these and combine to solve the bigger
     problem.
- Dynammic Programming :: break the problem into smaller dependent
     sub-problems, solve the sub-problems, storing the intermediate
     values to solve the bigger problem.
- Backtracking :: start at any point and progress until either a
                  solution or unfeasible solution is reached, if the
                  solution is unfeasible we backtrack to the previous
                  decision point and keep looking for a solution until
                  all options exhausted.

*** Naive to DP: Bottum Up

*Rod Cutting Problem*

- Recursive solution:
  - Try cutting a first piece of all possible size and make a
    recursive call for cutting the remaining piece
  - Add the values (of the first piece and the result of the recursive
    call)
  - Return the max of all these combinations
- Recusion Tree:
  - Number of leaves = Number of different ways to cut the rod
  - Each path down to a leaf corresponds to a different way of cutting
    the rod.

#+BEGIN_SRC dot :file image/bagwell-digraph.png :cmdline -Kdot -Tpng
  digraph {
          a -> b
  }
#+END_SRC

#+RESULTS:
[[file:image/bagwell-digraph.png]]


* Heuristics


** Tractibility
| Problems     | Condition                                                  |
|--------------+------------------------------------------------------------|
| Tractable    | Problems that have reasonable polynomial-time solutions    |
| Intractable  | Problems that have no reaonable, polynomial time solutions |
| Uncomputable | Problems that have no algorithms at all to solve them      |

*** Tractable Problems

A problem that has a reasonable or polynomial time complexity.

Therefore the algorithm to solve the probllem will have time
complexity: $T(n)=O(cn^k)$, where c and k are constants.

**** Example

- Searching an unordered list
- Searching an ordered list
- Sorting a list

**** Tractable Problems expolored in Unit 3

- Minimum Spanning Tree $\rightarrow$ Prim's Algorithm $O( \vert V \vert^2)$
- Shortest Path \rightarrow Floyd Warshall's $O(\vert V\vert^3)$
- Sorting a List \rightarrow MergSort $O(n\log n)$
 

*** Intractable Problems

A problem that cannot be solved in polynomial time that has a
unreasonable or exponential time complexity solution is said to be
intractable.

- $T(n) = O(2^n)$
- $T(n) = O(n!)$
- $T(n) = O(n^n)$

**** Examples

- Travelling salesman problem
- Longest path problem
- Multimachine job scheduling problem




** Combinatorial Explosions

Combinations of x items from n items:

$$
   ^nC_x = \binom nx = \dfrac{n!}{x!(n-x)!} \text{ where 0!=1}
$$


*** Example

In a group of 3 girlsm how many photos are needed for every combination?

- 0 girls in a photo $^3C_0 = \binom 30 = 1$
- 1 girls in a photo $^3C_1 = \binom 31 = 3$
- 2 girls in a photo $^3C_2 = \binom 32 = 3$
- 3 girls in a photo $^3C_3 = \binom 33 = 1$
- $\therefore$ Photos needed $= 1 +3 +3 +1 = 8$

*** Monkey Puzzle Problem

- Given:
  - A set of n square cards who sides are imprinted with the upper and
    lower halves of colored monkeys.
  - n is a square number such that $n=m^2$
  - Cards cannot be rotated
- Problem:
  - Determine if an arrangement of the n cards in an $m \times x$ gird
    exists such that each adjacement pair of cards display the upper
    and lower half of a monkey of the same color.

(image)

**** Analysis

- If there are $n=9$ cards
- To fill the first cell, we have 9 card choices
- To fill the second cell, we have 8 card choices
- To fill the third cell we have 7 card choices remaining ...etc
- The total number of unique arrangements for $n=9$ cards is $9! =
  362,880$

For n cards, the number of arrangements to examine is n!. If we can
analyse one arrangement in a microsecond

\begin{align*}
9! &= 362,880 \mu s = 0.36288s\\
16! &= 20,922,789,888,000 \mu s \approx 242 \text{ days}\\
25! &= 15,511,210,043,330,985,984,000,000 \mu s = 491,520,585,955 \text{ years}
\end{align*}



*** Travelling Salesman Problem

#+BEGIN_QUOTE
- Input: There are n cities
- Output: Find the shortest tour from a particular city that visit
  each city exactly once before returning to the city where it
  started.
#+END_QUOTE

A hamiltonian circuit can be represented by a sequence of $n+1$ cities
$v1, v2, \dots , vn$. Where the first and the last are the same and all
the others are distint.

- A brute force or exhaustive search has $(n-1)(n-2)(n- \dots) \dots$


** Problem Classification

What is the best time complexity algorithm for solving a particular
problem?

*** Time Consumption of solutions by time complexity

*** Class P

- A solution can be found in polynomial time.
- deterministic algorithm :: one that always computes the correct
     answer

*** Class NP

- A solution can be verified in polynomial time
- Non-determinsitic polynomial time (the answer cannot be found in
  polynomial time) problems are a class of decision problems for which
  solutions are verifiable in polynomial time.
- Non-deterministic problems can be solved in polynomial time on a
  'non-deterministic' Turing Machine

$$P \subseteq NP , \text{ but no one knows whether } P = NP$$

**** NP Problems in the real world

- Scheduling a fleet of vehicles to transport items
- Laying out a circuit board
- Cutting up sheets of raw materials
- Checking protein folding
- Genome sequencing

*** Class NP-Complete

- NP-Complete problems are the 'hardest' problems in NP and are
  grouped together.
- If one NP-Complete problem can be solved in polynomial time then
  every NP-Complete problem can be solved in polynmoial time.


**** Examples

- Decision Travelling Salesman Problem
- Knapsack 0-1 Problem
- 3 Colour Map Problem
- Tower of Hanoi

*** Class NP-Hard

- NP-Hard problems include all NP-Complete problems.
- The NP-Hard problems that are not in NP-Complete (NPC) are problems,
  where even the solution cannot be checked for correctness in
  polynomial time.

(venn diagram)

*** Recognising Problems


* Time Analysis Of Recursive algorithms

** Telescroping
** Backsubstitution
** Tree Method
